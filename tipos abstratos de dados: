Crie uma lista que armazene os nomes dos países em ordem alfabética. Em
seguida, crie uma função que receba um nome de país e retorne a posição dele na
lista.


paises = ["Afeganistão", "África do Sul", "Albânia", "Alemanha", "Andorra", "Angola", "Antígua e Barbuda", "Arábia Saudita", "Argélia", "Argentina", "Armênia", "Austrália", "Áustria", "Azerbaijão", "Bahamas", "Bahrein", "Bangladesh", "Barbados", "Belarus", "Bélgica", "Belize", "Benin", "Bhutan", "Bolívia", "Bósnia e Herzegovina", "Botsuana", "Brasil", "Brunei", "Bulgária", "Burkina Faso", "Burundi", "Butão", "Cabo Verde", "Camboja", "Camarões", "Canadá", "Catar", "Cazaquistão", "Chade", "Chile", "China", "Chipre", "Colômbia", "Comores", "Congo", "Coreia do Norte", "Coreia do Sul", "Costa do Marfim", "Costa Rica", "Croácia", "Cuba", "Dinamarca", "Djibuti", "Dominica", "Egito", "El Salvador", "Emirados Árabes Unidos", "Equador", "Eritreia", "Eslováquia", "Eslovênia", "Espanha", "Estados Unidos", "Estônia", "Etiópia", "Fiji", "Filipinas", "Finlândia", "França", "Gabão", "Gâmbia", "Gana", "Geórgia", "Granada", "Grécia", "Guatemala", "Guiana", "Guiné", "Guiné Equatorial", "Guiné-Bissau", "Haiti", "Honduras", "Hungria", "Iêmen", "Ilhas Marshall", "Ilhas Maurício", "Ilhas Salomão", "Índia", "Indonésia", "Irã", "Iraque", "Irlanda", "Islândia", "Israel", "Itália", "Jamaica", "Japão", "Jordânia", "Kiribati", "Kuwait", "Laos", "Lesoto", "Letônia", "Líbano", "Libéria", "Líbia", "Liechtenstein", "Lituânia", "Luxemburgo", "Macedônia do Norte", "Madagascar", "Malásia", "Malaui", "Maldivas", "Mali", "Malta", "Marrocos", "Mauritânia", "México", "Micronésia", "Moçambique", "Moldávia", "Mônaco", "Mongólia", "Montenegro", "Namíbia", "Nauru", "Nepal", "Nicarágua", "Níger", "Nigéria", "Noruega", "Nova Zelândia", "Omã", "Países Baixos", "Palau", "Panamá", "Papua Nova Guin"]

def posicao_pais(pais):
    paises = ["Afeganistão", "África do Sul", "Albânia", "Alemanha", "Andorra", "Angola", "Antígua e Barbuda", "Arábia Saudita", "Argélia", "Argentina", "Armênia", "Austrália", "Áustria", "Azerbaijão", "Bahamas", "Bahrein", "Bangladesh", "Barbados", "Belarus", "Bélgica", "Belize", "Benin", "Bhutan", "Bolívia", "Bósnia e Herzegovina", "Botsuana", "Brasil", "Brunei", "Bulgária", "Burkina Faso", "Burundi", "Butão", "Cabo Verde", "Camboja", "Camarões", "Canadá", "Catar", "Cazaquistão", "Chade", "Chile", "China", "Chipre", "Colômbia", "Comores", "Congo", "Coreia do Norte", "Coreia do Sul", "Costa do Marfim", "Costa Rica", "Croácia", "Cuba", "Dinamarca", "Djibuti", "Dominica", "Egito", "El Salvador", "Emirados Árabes Unidos", "Equador", "Eritreia", "Eslováquia", "Eslovênia", "Espanha", "Estados Unidos", "Estônia", "Etiópia", "Fiji", "Filipinas", "Finlândia", "França", "Gabão", "Gâmbia", "Gana", "Geórgia", "Granada", "Grécia", "Guatemala", "Guiana", "Guiné", "Guiné Equatorial", "Guiné-Bissau", "Haiti", "Honduras", "Hungria", "Iêmen", "Ilhas Marshall", "Ilhas Maurício", "Ilhas Salomão", "Índia", "Indonésia", "Irã", "Iraque", "Irlanda", "Islândia", "Israel", "Itália", "Jamaica", "Japão", "Jordânia", "Kiribati", "Kuwait", "Laos", "Lesoto", "Letônia", "Líbano", "Libéria", "Líbia", "Liechtenstein", "Lituânia", "Luxemburgo", "Macedônia do Norte", "Madagascar", "Malásia", "Malaui", "Maldivas", "Mali", "Malta", "Marrocos", "Mauritânia", "México", "Micronésia", "Moçambique", "Moldávia", "Mônaco", "Mongólia", "Montenegro", "Namíbia", "Nauru", "Nepal", "Nicarágua", "Níger", "Nigéria", "Noruega", "Nova Zelândia", "Omã", "Países Baixos", "Palau", "Panamá", "Papua Nova Guiné"]
 
 
 
 
 
 b) Crie uma lista vazia que armazene números inteiros. Em seguida, crie uma função
que adicione um número inteiro no início da lista e outra que adicione um número
inteiro no final da lista.


numeros = []

def add_inicio(n):
    numeros.insert(0, n)

def add_fim(n):
    numeros.append(n)

    add_inicio(5)
add_fim(10)
add_inicio(3)
add_fim(7)
print(numeros)  # output: [3, 5, 10, 7]





2) Implementando filas em Python usando tipos abstratos de dados.


a) Crie uma fila que armazene as pessoas que estão esperando em uma fila. Em
seguida, crie uma função que remova a primeira pessoa da fila.

fila = []


fila.append("João")
fila.append("Maria")
fila.append("José")


primeiro = fila.pop(0)

print(primeiro)



b) Crie uma fila vazia que armazene números inteiros. Em seguida, crie uma função
que adicione um número inteiro no final da fila e outra que remova o primeiro
número da fila.

from collections import deque

fila = deque()


def adicionar_fila(numero):
    fila.append(numero)


from collections import deque

fila = deque()

def adicionar_fila(numero):
    fila.append(numero)

def remover_fila():
    if fila:
        fila.popleft()

3) Implementando pilhas em Python usando tipos abstratos de dados.

pilha_paginas_visitadas = []

def adicionar_pagina(pagina):
    pilha_paginas_visitadas.append(pagina)

def remover_ultima_pagina():
    if pilha_paginas_visitadas:
        pilha_paginas_visitadas.pop()

pilha_numeros_inteiros = []

def adicionar_numero(numero):
    pilha_numeros_inteiros.append(numero)

def remover_numero():
    if pilha_numeros_inteiros:
        pilha_numeros_inteiros.pop()

4) Implementando árvores binárias em Python usando tipos abstratos de dados.

class Pessoa:
    def __init__(self, nome, idade, sexo, pai=None, mae=None):
        self.nome = nome
        self.idade = idade
        self.sexo = sexo
        self.pai = pai
        self.mae = mae

def encontrar_pessoa(raiz, nome):
    if raiz is None:
        return None
    if raiz.nome == nome:
        return raiz
    pessoa_encontrada = encontrar_pessoa(raiz.pai, nome)
    if pessoa_encontrada is None:
        pessoa_encontrada = encontrar_pessoa(raiz.mae, nome)
    return pessoa_encontrada

raiz = Pessoa('Avô', 70, 'M')
raiz.pai = Pessoa('Pai', 40, 'M', pai=raiz)
raiz.mae = Pessoa('Tia', 50, 'F', pai=raiz)
raiz.pai.pai = Pessoa('Avô paterno', 80, 'M')
raiz.pai.mae = Pessoa('Avó paterna', 75, 'F')
raiz.mae.pai = Pessoa('Avô materno', 90, 'M')
raiz.mae.mae = Pessoa('Avó materna', 85, 'F')

def encontrar_relacao(pessoa1, pessoa2):
    if pessoa1 is None or pessoa2 is None:
        return None
    if pessoa1.nome == pessoa2.nome:
        return 'mesma pessoa'
    if pessoa1.pai is not None and pessoa1.pai.nome == pessoa2.nome:
        return 'pai'
    if pessoa1.mae is not None and pessoa1.mae.nome == pessoa2.nome:
        return 'mãe'
    relacao_pai = encontrar_relacao(pessoa1.pai, pessoa2)
    if relacao_pai is not None:
        return 'avô paterno' if relacao_pai == 'pai' else 'avó paterna'
    relacao_mae = encontrar_relacao(pessoa1.mae, pessoa2)
    if relacao_mae is not None:
        return 'avô materno' if relacao_mae == 'pai' else 'avó materna'
    return None







